apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {

    compileSdkVersion 16
    buildToolsVersion "22.0.1"


    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    lintOptions {
        abortOnError false
    }
}


repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/drorg/maven/'
    }
}

dependencies {
    compile ('com.applicaster:applicaster-android-sdk:2.2.12')
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
    }
}

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}


publishing {
    publications {
        ViewPagerIndicatorLibraryMavenJava(MavenPublication) {
            groupId GROUP
            version getVersionName()
            artifactId 'ViewPagerIndicatorLibrary'
            artifact "build/outputs/aar/workspace-release.aar"
            artifact androidJavadocsJar
            artifact androidSourcesJar
            pom.withXml {
                Node root = asNode()
                root.appendNode('name', 'artifactId')
                root.appendNode('description', 'Applicaster ViewPagerIndicatorLibrary')
                root.appendNode('url', 'https://github.com/applicaster/'+artifactId)

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', 'https://github.com/applicaster/'+artifactId+'/issues')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/applicaster/'+artifactId+'.git')
                scm.appendNode('connection', 'scm:https://github.com/applicaster/'+artifactId+'.git')
                scm.appendNode('developerConnection', 'scm:https://github.com/applicaster/'+artifactId+'.git')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', POM_LICENCE_NAME)
                license.appendNode('url', POM_LICENCE_URL)
                license.appendNode('distribution', POM_LICENCE_DIST)

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', POM_DEVELOPER_ID)
                developer.appendNode('name', POM_DEVELOPER_NAME)
                developer.appendNode('email', POM_DEVELOPER_EMAIL)

                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if (!it.name.is('unspecified')) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? bintrayUser : ""
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? bintrayApiKey : ""
}


bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['ViewPagerIndicatorLibraryMavenJava']
    publish = true
    pkg {
        repo = 'maven'
        name = 'ViewPagerIndicatorLibrary'
        websiteUrl = 'https://github.com/applicaster/'+name
        issueTrackerUrl = 'https://github.com/applicaster/'+name+'/issues'
        vcsUrl = 'https://github.com/applicaster/'+name+'.git'
        licenses = ['Apache-2.0']
        labels = ['android']
        version{
            name = getVersionName()
            vcsTag = getVersionName()
        }
    }
}


task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
    archives androidJar
}